---
// Copied from Starlight
// https://github.com/withastro/starlight/blob/ed06bf05edab3f8f0a5c397c5705687589ade932/packages/starlight/components/ThemeProvider.astro

import { Icon } from "@astrojs/starlight/components";

/**
 *! @license
 *! MIT License
 *!
 *! Copyright (c) 2023 [Astro contributors](https://github.com/withastro/starlight/graphs/contributors)
 *!
 *! Permission is hereby granted, free of charge, to any person obtaining a copy
 *! of this software and associated documentation files (the "Software"), to deal
 *! in the Software without restriction, including without limitation the rights
 *! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *! copies of the Software, and to permit persons to whom the Software is
 *! furnished to do so, subject to the following conditions:
 *!
 *! The above copyright notice and this permission notice shall be included in all
 *! copies or substantial portions of the Software.
 *!
 *! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *! SOFTWARE.
 */
---

{/* This is intentionally inlined to avoid FOUC. */}
<script is:inline>
  window.StarlightThemeProvider = (() => {
    const storedTheme =
      typeof localStorage !== "undefined" &&
      localStorage.getItem("starlight-theme");
    const theme =
      storedTheme ||
      (window.matchMedia("(prefers-color-scheme: light)").matches
        ? "light"
        : "dark");
    document.documentElement.dataset.theme =
      theme === "light" ? "light" : "dark";
    return {
      updatePickers(theme = storedTheme || "auto") {
        document
          .querySelectorAll("starlight-theme-select")
          .forEach((picker) => {
            const select = picker.querySelector("select");
            if (select) select.value = theme;
            /** @type {HTMLTemplateElement | null} */
            const tmpl = document.querySelector(`#theme-icons`);
            const newIcon = tmpl && tmpl.content.querySelector("." + theme);
            if (newIcon) {
              const oldIcon = picker.querySelector("svg.label-icon");
              if (oldIcon) {
                oldIcon.replaceChildren(...newIcon.cloneNode(true).childNodes);
              }
            }
          });
      },
    };
  })();
</script>

<template id="theme-icons">
  <Icon name="sun" class="light" />
  <Icon name="moon" class="dark" />
  <Icon name="laptop" class="auto" />
</template>
